import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { faPencilAlt } from '@fortawesome/free-solid-svg-icons';
import { faTrash } from '@fortawesome/free-solid-svg-icons';
import { Vulnerability } from '../vuln-form/Vulnerability';
import { AppService } from '../app.service';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.sass']
})
export class VulnerabilityComponent implements OnInit {
  vulnAry: any = [];
  assetId: number;
  assessmentId: number;
  orgId: number;
  faPencilAlt = faPencilAlt;
  faTrash = faTrash;

  constructor(public activatedRoute: ActivatedRoute, public router: Router, public appService: AppService) {}

  ngOnInit() {
    this.activatedRoute.data.subscribe(({ vulnerabilities }) => (this.vulnAry = vulnerabilities));
    this.activatedRoute.params.subscribe((params) => {
      this.assetId = params['assetId'];
      this.assessmentId = params['assessmentId'];
      this.orgId = params['orgId'];
    });
  }

  /**
   * Function to navigate the user to the Vulnerability Form
   * Takes no arguments, passes the org id, asset id, assessment id, and loads the form
   * @memberof VulnerabilityComponent
   */
  navigateToVulnerabilityForm() {
    this.router.navigate([
      `organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/vuln-form`
    ]);
  }

  /**
   * Function responsible for navigating to a vulnerability
   * @param {number} vulnId is the ID of the vulnerability requested
   * @memberof VulnerabilityComponent
   */
  navigateToVulnerabilityFormById(vulnId: number) {
    this.router.navigate([
      `organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/vuln-form/${vulnId}`
    ]);
  }

  /**
   * Function responsible for navigating to an assessment, takes no params directly
   * @memberof VulnerabilityComponent
   */
  navigateToAssessments() {
    this.router.navigate([`organization/${this.orgId}/asset/${this.assetId}`]);
  }

  /**
   * Function responsible for navigating to report area, takes no params directly
   * @memberof VulnerabilityComponent
   */
  navigateToReport() {
    this.router.navigate([`organization/${this.orgId}/asset/${this.assetId}/assessment/${this.assessmentId}/report`]);
  }

  /**
   * Function responsible for deleting a vulnerability
   * @param {Vulnerability} vuln associated data for the vulnerability, cleans up associations
   * of the vulnerability and the assessment it is assigned to by ID
   * @memberof VulnerabilityComponent
   */
  deleteVuln(vuln: Vulnerability) {
    const r = confirm(`Delete the vulnerability "${vuln.name}"`);
    if (r === true) {
      this.appService.deleteVuln(vuln.id).subscribe((success) => {
        // TODO: Success message
        this.appService.getVulnerabilities(this.assessmentId).then((res) => (this.vulnAry = res));
      });
    }
  }
}
