import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, OneToMany } from 'typeorm';
import { Assessment } from './Assessment';
import { IsUrl, IsIn, MaxLength, IsAlpha, IsDecimal } from 'class-validator';
import { File } from './File';
import { ProblemLocation } from './ProblemLocation';
import { Resource } from './Resource';

@Entity()
export class Vulnerability {
  @PrimaryGeneratedColumn()
  id: number;
  @Column()
  jiraId: string;
  @Column()
  @IsIn(['Low', 'Medium', 'High'])
  impact: string;
  @Column()
  @IsIn(['Low', 'Medium', 'High'])
  likelihood: string;
  @Column()
  @IsIn(['Low', 'Medium', 'High', 'Critical', 'Informational'])
  risk: string;
  @Column()
  @IsIn(['Yes', 'No'])
  systemic: string;
  @Column({ type: 'decimal', scale: 1, precision: 10 })
  @IsDecimal()
  cvssScore: number;
  @Column()
  @IsUrl()
  cvssUrl: string;
  @Column()
  @IsIn(['Open', 'Resolved', 'On Hold'])
  status: string;
  @Column({ length: 4000 })
  @MaxLength(4000)
  description: string;
  @Column({ length: 4000 })
  @MaxLength(4000)
  detailedInfo: string;
  @Column({ length: 4000 })
  @MaxLength(4000)
  remediation: string;
  @Column()
  name: string;
  @ManyToOne((type) => Assessment, (assessment) => assessment.vulnerabilities, { onDelete: 'CASCADE' })
  assessment: Assessment;
  @OneToMany((type) => File, (file) => file.vulnerability)
  screenshots: File[];
  @OneToMany((type) => ProblemLocation, (problemLocation) => problemLocation.vulnerability)
  problemLocations: ProblemLocation[];
  @OneToMany((type) => Resource, (resource) => resource.vulnerability)
  resource: Resource[];
}
